/**
    Copyright 2014-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with the License. A copy of the License is located at

        http://aws.amazon.com/apache2.0/

    or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */
package com.amazon.customskill;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.stream.IntStream;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.amazon.speech.json.SpeechletRequestEnvelope;
import com.amazon.speech.slu.Intent;
import com.amazon.speech.speechlet.IntentRequest;
import com.amazon.speech.speechlet.LaunchRequest;
import com.amazon.speech.speechlet.SessionEndedRequest;
import com.amazon.speech.speechlet.SessionStartedRequest;
import com.amazon.speech.speechlet.SpeechletResponse;
import com.amazon.speech.speechlet.SpeechletV2;
import com.amazon.speech.ui.PlainTextOutputSpeech;
import com.amazon.speech.ui.Reprompt;
import com.amazon.speech.ui.SsmlOutputSpeech;

import nlp.dkpro.backend.PosTagger;

/*
 * This class is the actual skill. Here you receive the input and have to produce the speech output. 
 */
public class AlexaSkillSpeechlet implements SpeechletV2 {
	public static String userRequest;

	static Logger logger = LoggerFactory.getLogger(AlexaSkillSpeechlet.class);

	@Override
	public void onSessionStarted(SpeechletRequestEnvelope<SessionStartedRequest> requestEnvelope) {
		logger.info("Alexa session begins");
	}

	@Override
	public SpeechletResponse onLaunch(SpeechletRequestEnvelope<LaunchRequest> requestEnvelope) {
		return getWelcomeResponse();
	}

	@Override
	public SpeechletResponse onIntent(SpeechletRequestEnvelope<IntentRequest> requestEnvelope) {
		IntentRequest request = requestEnvelope.getRequest();

		Intent intent = request.getIntent();
		String response = "";
		
		if (intent.getSlots().containsKey("restaurant")) { 
			ArrayList<Restaurant> restaurants = App.getData();
			for(Restaurant restaurant : restaurants) {
				if(intent.getSlot("restaurant").getValue().contains(restaurant.getName().toLowerCase())) {
					response = "In der Nähe gibt es " + restaurant.getName() + ". Die Adresse ist " + restaurant.getAddress();
				}
			}
			return continueConversation(response);
			
		} else if (intent.getSlots().containsKey("gericht")) {
			ArrayList<Restaurant> restaurants = App.getData();
			for(Restaurant restaurant : restaurants) {
				if(intent.getSlot("gericht").getValue().contains(restaurant.getTitle().toLowerCase())) {
					response = "In der Nähe gibt es " + restaurant.getName() + ", wo du" + restaurant.getTitle() + " essen kanst.";
				}
			}
			return continueConversation(response);
		} 
		
		return continueConversation("Möchtest du was bestimmtes essen oder ein bestimmtes Restaurant besuchen?");
		}

		//userRequest = intent.getSlot("Alles").getValue();
		
	/*	logger.info("Received following text: [" + userRequest + "]");
		if (userRequest.contains("ja")) {
			String s = App.getData().get(1);
			return response(s);
		} else {
			return response("Auf wiederhören!");
		}
		*/
		
		//return response("Erkannter Text: " + userRequest);
//        return responseWithFlavour("Erkannte Nomen: " + result, new Random().nextInt(5));
	}

	/**
	 * formats the text in weird ways
	 * 
	 * @param text
	 * @param i
	 * @return
	 */
	private SpeechletResponse responseWithFlavour(String text, int i) {

		SsmlOutputSpeech speech = new SsmlOutputSpeech();
		switch (i) {
		case 0:
			speech.setSsml("<speak><amazon:effect name=\"whispered\">" + text + "</amazon:effect></speak>");
			break;
		case 1:
			speech.setSsml("<speak><emphasis level=\"strong\">" + text + "</emphasis></speak>");
			break;
		case 2:
			String half1 = text.split(" ")[0];
			String[] rest = Arrays.copyOfRange(text.split(" "), 1, text.split(" ").length);
			speech.setSsml("<speak>" + half1 + "<break time=\"3s\"/>" + StringUtils.join(rest, " ") + "</speak>");
			break;
		case 3:
			String firstNoun = "erstes Wort buchstabiert";
			String firstN = text.split(" ")[3];
			speech.setSsml(
					"<speak>" + firstNoun + "<say-as interpret-as=\"spell-out\">" + firstN + "</say-as>" + "</speak>");
			break;
		case 4:
			speech.setSsml(
					"<speak><audio src='soundbank://soundlibrary/transportation/amzn_sfx_airplane_takeoff_whoosh_01'/></speak>");
			break;
		default:
			speech.setSsml("<speak><amazon:effect name=\"whispered\">" + text + "</amazon:effect></speak>");
		}

		return SpeechletResponse.newTellResponse(speech);
	}

	@Override
	public void onSessionEnded(SpeechletRequestEnvelope<SessionEndedRequest> requestEnvelope) {
		logger.info("Alexa session ends now");
	}

	/*
	 * The first question presented to the skill user (entry point)
	 */
	private SpeechletResponse getWelcomeResponse() {
		String s = "Hallo!";
		SsmlOutputSpeech speech = new SsmlOutputSpeech();
		speech.setSsml("<speak>" + s + "</speak>");

		return askUserResponse("Hallo! Hier ist die Essen Expertin! Worauf hast du heute hunger?");
	}

	/**
	 * Tell the user something - the Alexa session ends after a 'tell'
	 */
	private SpeechletResponse continueConversation(String text) {
		// Create the plain text output.
		
		PlainTextOutputSpeech speech = new PlainTextOutputSpeech();
		speech.setText(text);
		
		PlainTextOutputSpeech speechOut = new PlainTextOutputSpeech();
		speechOut.setText("hey");
		
		Reprompt speech2 = new Reprompt();
		speech2.setOutputSpeech(speechOut);
		
		return SpeechletResponse.newAskResponse(speech, speech2);
	}
	
	private SpeechletResponse response(String text) {
		// Create the plain text output.
		
		PlainTextOutputSpeech speech = new PlainTextOutputSpeech();
		speech.setText(text);
		
		return SpeechletResponse.newTellResponse(speech);
	}


	/**
	 * A response to the original input - the session stays alive after an ask
	 * request was send. have a look on
	 * https://developer.amazon.com/de/docs/custom-skills/speech-synthesis-markup-language-ssml-reference.html
	 * 
	 * @param text
	 * @return
	 */
	private SpeechletResponse askUserResponse(String text) {
		SsmlOutputSpeech speech = new SsmlOutputSpeech();
		speech.setSsml("<speak>" + text + "</speak>");

		// reprompt after 8 seconds
		SsmlOutputSpeech repromptSpeech = new SsmlOutputSpeech();
		repromptSpeech.setSsml("<speak><emphasis level=\"strong\">Hey!</emphasis> Bist du noch da?</speak>");

		Reprompt rep = new Reprompt();
		rep.setOutputSpeech(repromptSpeech);

		return SpeechletResponse.newAskResponse(speech, rep);
	}

}
